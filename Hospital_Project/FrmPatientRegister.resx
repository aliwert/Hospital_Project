<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /gckooFazsuztwAAAABJRU5ErkJggg==
</value>
  </data>
</root>